'''
Задача 26: Напишите программу, которая на вход принимает
два числа A и B, и возводит число А в целую степень B с
помощью рекурсии.
'''
A = int(input('Введите число основания степени: '))
B = int(input('Введите число степени: '))
def stepp(a, b):
    if b == 0:
        return 1
    elif b == 1:
        return a
    else:
        return a * stepp(a, b - 1)

print(stepp(A, B))

'''
Задача 28: Напишите рекурсивную функцию sum(a, b),
возвращающую сумму двух целых неотрицательных чисел. Из
всех арифметических операций допускаются только +1 и -1.
Также нельзя использовать циклы.
'''
def summ(a, b):
    if b == 0:
        return a
    return summ(a + 1, b - 1)

A = int(input('Введите 1-ое слагаемое: '))
B = int(input('Введите 2-ое слагаемое: '))
print(summ(A, B))

'''
Задача №39. Решение в группах
Даны два массива чисел. Требуется вывести те элементы первого массива (в том порядке, в каком они идут в первом
массиве), которых нет во втором массиве. Пользователь вводит число N - количество элементов в первом массиве, затем N
чисел - элементы массива. Затем число M - количество элементов во втором массиве. Затем элементы второго массива
Ввод:                                  Вывод:
7                                      3 3 2 12
3 1 3 4 2 4 12
6
4 15 43 1 15 1                         (каждое число вводится с новой строки)
2) (пользовательский ввод можно заменить на рандомный ввод)
Пользователь вводит размер первого массива – N и элементы первого массива.
затем размер второго массива M и элементы второго массива Нужно вывести те элементы первого массива, 
которых нет во втором массиве, при этом порядок последовательности сохранить исходный
'''
import random as rnd
n = rnd.randint(5, 10)
m = rnd.randint(5, 10)

list_n = [rnd.randint(1, 10) for _ in range(n)]
list_m = [rnd.randint(1, 10) for _ in range(m)] # list comprehension python

# for i in range(n):
#     list_n[i] = rnd.randint(1, 10)
# for j in range(n):
#     list_m[j] = rnd.randint(1, 10)

print(n, list_n)
print(m, list_m)

list_3 = [num for num in list_n if num not in list_m]

# for num in list_n:
#     if num not in list_m:
#         list_3.append(num)

print(list_3)

'''
Задача №41. Решение в группах
Дан массив, состоящий из целых чисел. Напишите программу, которая в данном массиве определит
количество элементов, у которых два соседних и, при этом, оба соседних элемента меньше данного. Сначала
вводится число N — количество элементов в массиве Далее записаны N чисел — элементы массива. Массив
состоит из целых чисел.
Ввод:              Ввод:
5                  5
1 2 3 4 5          1 5 1 5 1
Вывод:             Вывод:
0                  2
2) (пользовательский ввод можно заменить на рандомный)
Пользователь вводит размер массива – N и элементы массива (целые числа).
нужно из этого массива вывести количество элементов, 
у которых ближайшие соседние элементы меньше самого элемента.
'''
from random import randint as rndi

list_1 = [rndi(1, 10) for _ in range(rndi(5, 10))]
count_nums = 0

for i in range(1, len(list_1) - 1):
    if list_1[i - 1] < list_1[i] > list_1[i + 1]:
        count_nums += 1

print(len(list_1), list_1)
print(count_nums)

'''
Задача №43. Решение в группах
Дан список чисел. Посчитайте, сколько в нем пар элементов, равных друг другу. Считается, что любые
два элемента, равные друг другу образуют одну пару, которую необходимо посчитать. Вводится список
чисел. Все числа списка находятся на разных строках.
Ввод:          Вывод:
1 2 3 2 3 2    4
2) (пользовательский ввод можно заменить на рандомный)
Пользователь вводит размер массива – N и элементы массива (целые числа).
нужно посчитать сколько повторений у каждого числа посчитанные числа 
можно посчитать повторно в паре с другими числами
'''
from random import randint as rnd
            #   перед. длину массива       возвращать список интов
def get_random_array(array_len: int) -> list[int]: #annotation
    """
    Получение случайного массива

    :param array_len: Размерность массива
    :return: Список цифр
    """
    return [rnd(0, 9) for _ in range(array_len)]

def get_doubles(array: list[int]) -> int:
    """
    Поиск пар с одинаковыми числами

    :param array: Список с целыми числами
    :return: Количество пар
    """
    count = 0
    for i in range(len(array)):
        for j in range(i + 1, len(array)):
            if array[i] == array[j]:
                count += 1
    return count

if __name__ == "__main__":
    n = int(input('Введите размер массива: '))
    array = get_random_array(array_len=n)
    print(f'Массив: {array}')
    print('Количество повторений', get_doubles(array=array))

'''
(пользовательский ввод можно заменить на рандомный)
Пользователь вводит натуральное число – k
В диапазоне от 0 до k нужно вывести все пары чисел N и M, 
в которых сумма делителей N равняется M, а сумма делителей M равняется N (число само на себя делить нельзя)
Пары необходимо выводить по одной паре в строке, разделяя числа пробелами. Каждая пара выводится только один раз, без повторов.

Пример: Возьмём 2 числа 220 и 284. Найдём их делители
Делители 220 – (1, 2, 4, 5, 10, 11, 20, 22, 44, 55, 110)
1 + 2 + 4 + 5 + 10 + 11 + 20 + 22 + 44 + 55 + 110 = 284
Делители 284 – (1, 2, 4, 71, 142 )
1 + 2 + 4 + 71 + 142 = 220
Ввод:    Вывод:
300      220 284
'''

def sum_div(num):
    summ = 1
    for div in range(2, int(num ** 0.5) + 1):
        if num % div == 0:
            summ += div + num // div
    return summ

k = int(input('Введите число: '))
result = []
for num_1 in range(2, k):
    num_2 = sum_div(num_1)
    sum_2 = sum_div(num_2)
    if num_1 == sum_2 and num_1 != num_2:
        temp = (num_1, num_2)
        temp_result = min(temp), max(temp)
        if temp_result not in result:
            result.append((num_1, num_2))

for i_tuple in result:
    print(*i_tuple)